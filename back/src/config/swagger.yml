openapi: 3.0.3
info:
  title: Challenge API - Matias Ahumada
  contact:
    email: mahumada486@gmail.com
  version: 1.0.0
servers:
  - url: http://localhost:3000
tags:
  - name: Todo
    description: Everything about your Todos
paths:
  /api/todo:
    get:
      tags:
        - Todo
      summary: Finds Todos
      operationId: todo
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TodosResponse'          
            
        '500':
          description: Internal Server Error
      security:
        - token:
          - token
  /api/todo/{id}:
    get:
      tags:
        - Todo
      summary: Find Todo By Id
      operationId: todoById
      parameters:
        - name: id
          in: path
          description: ID of todo to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/TodosResponse'          
        '400':
          description: id is required
        '404':
          description: Todo not exist
        '500':
          description: Internal Server Error
      security:
        - token:
          - token
  /api/todos/{id}:
    put:
      tags:
        - Todo
      summary: Update an existing todo
      description: Update an existing todo by Id
      operationId: updateTodo
      parameters:
        - name: id
          in: path
          description: ID of todo to return
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent todo
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Todo'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodosResponse'          
        '400':
          description: id is required
        '404':
          description: Todo not found
        '500':
          description: Internal Server Error
      security:
        - token:
          - token
    delete:
      tags:
        - Todo
      summary: Deletes a todo
      description: delete a todo
      operationId: deletetodo
      parameters:
        - name: id
          in: path
          description: Todo id to delete
          required: true
          schema:
            type: string
            
      responses:
        '200':
          description: Todo deleted
        '400':
          description: id is required
        '404':
          description: Todo not exist
        '500':
          description: Internal Server Error
          
          
      security:
        - token:
          - token
            
  /api/todos:
    post:
      tags:
        - Todo
      summary: Add a new todo to the store
      description: Add a new todo to the store
      operationId: createTodo
      requestBody:
        description: Create a new pet in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Todo'
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodosResponse'          
        
        '500':
          description: Internal Server Errorn
      security:
        - token:
          - token
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
components:
  schemas:
    User:
      required:
        - email
        - password
      type: object
      properties:
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
    UserResponse:
      type: object
      properties:
        token:
          type: string
          example: 1lkj49123uy4'901245on124noklno1i2
    Todo:
      required:
        - title
      type: object
      properties:
   
        title:
          type: string
    TodosResponse:
      type: object
      required:
        - title
      properties:
        id:
          type: string
        title:
          type: string
  requestBodies:
    Todo:
      description: Todo object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Todo'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    token:
      type: apiKey
      name: token
      in: header