openapi: 3.0.3
info:
  title: Challenge API - Matias Ahumada
  contact:
    email: mahumada486@gmail.com
  version: 1.0.0
servers:
  - url: http://localhost:3000
tags:
  - name: Todo
    description: Everything about your Todos
paths:
  /api/todos:
    get:
      tags:
        - Todo
      summary: Finds Todos
      operationId: todo
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TodosResponse'          
            
        '500':
          description: Internal Server Error
      security:
        - token: []
  
    post:
      tags:
        - Todo
      summary: Add a new todo to the store
      description: Add a new todo to the store
      operationId: createTodo
      requestBody:
        description: Create a new pet in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Todo'
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodosResponse'          
        
        '500':
          description: Internal Server Error
      security:
        - token: []
  /api/todos/{id}:
    get:
      tags:
        - Todo
      summary: Find Todo By Id
      operationId: todoById
      parameters:
        - name: id
          in: path
          description: ID of todo to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/TodosResponse'          
        '400':
          description: id is required
        '404':
          description: Todo not exist
        '500':
          description: Internal Server Error
      security:
        - token: []
  
    put:
      tags:
        - Todo
      summary: Update an existing todo
      description: Update an existing todo by Id
      operationId: updateTodo
      parameters:
        - name: id
          in: path
          description: ID of todo to return
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent todo
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Todo'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodosResponse'          
        '400':
          description: id is required
        '404':
          description: Todo not found
        '500':
          description: Internal Server Error
      security:
        - token: []
    delete:
      tags:
        - Todo
      summary: Deletes a todo
      description: delete a todo
      operationId: deletetodo
      parameters:
        - name: id
          in: path
          description: Todo id to delete
          required: true
          schema:
            type: string
            
      responses:
        '200':
          description: Todo deleted
        '400':
          description: id is required
        '404':
          description: Todo not exist
        '500':
          description: Internal Server Error
      security:
        - token: []
            
  
          
  /users/register:
    post:
      tags:
        - User
      summary: Register user
      description: This can only be done by the logged in user.
      operationId: registerUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: User already exists
        '500':
          description: Internal Server Error
      
  /users/login:
    post:
      tags:
        - User
      summary: Login user
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'    
        '400':
          description: Email and password are required
        '401':
          description: User already not exists
        '404':
          description: Invalid password
        '500':
          description: Internal Server Error
      
        
  /users/logout:
    get:
      tags:
        - User
      summary: Logout user into the system
      operationId: logoutUser
      responses:
        '200':
          description: Logout
        '500':
          description: Internal Server Error
      
  /users:
    get:
      tags:
        - User
      summary: Get users
      operationId: getUsers
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'  
        '500':
          description: Internal Server Error
     
          
components:
  schemas:
    User:
      required:
        - email
        - password
      type: object
      properties:
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
    UserResponse:
      type: object
      properties:
        token:
          type: string
          example: 1lkj49123uy4'901245on124noklno1i2
    Todo:
      required:
        - title
      type: object
      properties:
   
        title:
          type: string
    TodosResponse:
      type: object
      required:
        - title
      properties:
        id:
          type: string
        title:
          type: string
  requestBodies:
    Todo:
      description: Todo object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Todo'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    token:
      type: http
      scheme: bearer
      bearerFormat: JWT